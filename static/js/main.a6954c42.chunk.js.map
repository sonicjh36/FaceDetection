{"version":3,"sources":["components/FaceRecognition/FaceRecognition.js","components/Logo/icon.svg","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","App.js","registerServiceWorker.js","index.js"],"names":["FaceRecognition","imageUrl","box","console","log","className","id","alt","src","width","heigh","map","obj","key","index","toString","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Logo","options","max","height","paddingTop","icon","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","app","Clarifai","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","calculateFaceLocation","data","outputs","regions","length","i","clarifaiFace","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","this","params","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a6954c42.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({ imageUrl, box }) => {\r\n  console.log('check', box);\r\n\r\n\r\n  return (\r\n    <div className='center ma'>\r\n      <div className='absolute mt2'>\r\n        <img id='inputimage' alt='' src={imageUrl} width='500px' heigh='auto'/>\r\n        {box.map(obj => (<div key={obj.index.toString()}className='bounding-box' style={{top: obj.topRow, right: obj.rightCol, bottom: obj.bottomRow, left: obj.leftCol}}></div>))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FaceRecognition;","export default __webpack_public_path__ + \"static/media/icon.a4f0dcd5.svg\";","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport icon from './icon.svg';\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className='ma4 mt0'>\r\n      <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{ height: 150, width: 150 }} >\r\n        <div className=\"Tilt-inner pa3\">\r\n          <img style={{paddingTop: '5px'}} alt='logo' src={icon}/>\r\n        </div>\r\n      </Tilt>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\r\n  return (\r\n    <div>\r\n      <p className='f3'>\r\n        {'Detect faces in the pictures.'}\r\n      </p>\r\n      <div className='center'>\r\n        <div className='form center pa4 br3 shadow-5'>\r\n          <input className='f4 pa2 w-70 center' type='tex' onChange={onInputChange}/>\r\n          <button\r\n            className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\r\n            onClick={onButtonSubmit}\r\n          >Detect</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageLinkForm;","import React, { Component } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport Clarifai from 'clarifai';\r\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\r\nimport Logo from './components/Logo/Logo';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport './App.css';\r\n\r\n//You must add your own API key here from Clarifai.\r\nconst app = new Clarifai.App({\r\n apiKey: '6cb581a0909e49ff9e708781f2d1869f'\r\n});\r\n\r\nconst particlesOptions = {\r\n  particles: {\r\n    number: {\r\n      value: 30,\r\n      density: {\r\n        enable: true,\r\n        value_area: 800\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      input: '',\r\n      imageUrl: '',\r\n      box: []\r\n    }\r\n  }\r\n\r\n\r\n  calculateFaceLocation = (data) => {\r\n    console.log(data.outputs);\r\n    console.log(data.outputs[0].data.regions.length);\r\n    let obj = [];\r\n    for (let i = 0 ; i < data.outputs[0].data.regions.length; i++) {\r\n      let clarifaiFace = data.outputs[0].data.regions[i].region_info.bounding_box;\r\n      let image = document.getElementById('inputimage');\r\n      let width = Number(image.width);\r\n      let height = Number(image.height);\r\n      obj[i] = {\r\n        leftCol: clarifaiFace.left_col * width,\r\n        topRow: clarifaiFace.top_row * height,\r\n        rightCol: width - (clarifaiFace.right_col * width),\r\n        bottomRow: height - (clarifaiFace.bottom_row * height),\r\n        index: i\r\n      };\r\n    }\r\n\r\n    console.log(obj);\r\n    return obj;\r\n\r\n  }\r\n\r\n  displayFaceBox = (box) => {\r\n    console.log(box);\r\n    this.setState({box: box});\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n  }\r\n\r\n  onButtonSubmit = () => {\r\n    this.setState({imageUrl: this.state.input});\r\n    app.models\r\n      .predict(\r\n        // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\r\n        Clarifai.FACE_DETECT_MODEL,\r\n        this.state.input)\r\n      .then(response => {\r\n        this.displayFaceBox(this.calculateFaceLocation(response));\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    const { imageUrl, box } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n         <Particles className='particles'\r\n          params={particlesOptions}\r\n        />\r\n        <div>\r\n          <Logo />\r\n          <ImageLinkForm\r\n            onInputChange={this.onInputChange}\r\n            onButtonSubmit={this.onButtonSubmit}\r\n          />\r\n          <FaceRecognition box={box} imageUrl={imageUrl} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}